[{"categories":null,"contents":" Riot Champion Trends and Item Recommender \u0026ldquo;is a data science project that aims to visualize a user\u0026rsquo;s performance by comparing their matches and timeline data against professional or similar ranking players using R and Plotly.\u0026rdquo; Based on this information, if there is enough correlation between player performance and items to wins, then recommend corresponding items based on matchups.\nGoals Primary\nCompile list of professional players from Season 9 of League of Legends Acquire Data from RIOT Servers Build Pipeline for automated collection Conduct data analysis and visualize results \u0026ndash; In Progress Determine if secondary objectives are viable  Secondary\nDetermine if gold income and damage traded between players that leads to wins Compare user\u0026rsquo;s performance to professional players in general Compare user\u0026rsquo;s performance to their champion\u0026rsquo;s matchup and role  Note: There\u0026rsquo;s a lot of websites that already do this however I want to get down on the specific timing on when they should get certain items and how much gold they should have at specific times.\nGithub https://github.com/JamesonThai/RiotGamesDataExtractionProject\n Its constantly being updated and is currently listed as a private repository and the API_KEY is unique per user account. Due to this, I removed some key files that contain my API_Key within it, ff you want to see the rest of the code feel free to send me an email or through a git request.  Status December 2018 - August 2019 (Paused)\n","permalink":"https://jamesonthai.github.io/projects/creations/riot-games-data-analysis/","tags":["Kaggle","Python Web Crawler","Requests","Riot API","Data Mining","Data Visualization","Recommendation System","Python","R","Tidyverse","JSON"],"title":"Riot Champion Trend and Item Recommender"},{"categories":null,"contents":"Based off the classic game Bomberman, my team of 8 people tackle how agents acomplish tasks with infinitely meaningful variations through competitive multi-agent learning.\n","permalink":"https://jamesonthai.github.io/projects/contributions/pommerman/","tags":["Python","Pytorch","Tensorflow","Tensorboard","TensorForce","GCP","Multi-Agent Learning","PPO","A2C","Policy Optimization","Machine Learning","AI"],"title":"Pommerman"},{"categories":null,"contents":" Leading two fellow students to develop a Python recomendation system for suggesting ratings for a user\u0026rsquo;s review through collabortive filters and machine learning algorithms achieving our highest accuracy of 89%. This is a multi-classification\nGoals Acquire Amazon Dataset Exploratory analysis of dataset Use ML Algorithms to predict review ratings Build Jupyter notebook to predict ratings Visualize preprocessed information and compiled Bag Of Words Present findings to general and informed audience  Algorithms  KNN Naive Bayes Ordered Logistic Regression Linear SVM Doc2Vec Decision Trees  Dataset We filtered the initial dataset of over 12 million reviews (12 GB) into five separate csv corresponding to their star ratings using Pandas. These five csvs were processed through feature selection and transformation from mainly their user\u0026rsquo;s raitings.\nNote: The main reason we used such a small dataset was because we did not have enough computing power. Just running Naive Bayes alone took around a 4 days of non-stop running on the local machine.\nStatus Completed April 2018 - December 2018\n Although listed as completed, this is a project I want to revisit when I have more time.\n ","permalink":"https://jamesonthai.github.io/projects/creations/amazon-review/","tags":["Jupyter","Conda","Python","Sentiment Analysis","NLP","Naive Bayes","Doc2Vec","Bag Of Words","Logistic Regression","Linear SVM","Pandas","Random Forrests","Amazon Dataset - Data Analysis","Scikit-learn","Recommendation System","JSON"],"title":"Amazon Reviews - Sentiment Analysis"},{"categories":null,"contents":"Working with another student, TravelGo is an Android Application aimed to function as a communication guide for traveling users. With a simple design, it includes examples in a variety of categories to help users learn on the go.\n","permalink":"https://jamesonthai.github.io/projects/contributions/travelgo/","tags":["Mobile","Translator","Java","Android"],"title":"TravelGo - Learn New Phrases"},{"categories":null,"contents":" An Automated Visualzing Application. AVA. Collaborating with two fellow students, AVA is based on machine learning model using Hidden Markov Chains (HNMs) and a Neural Netowrk created by Pybrain. She can detect pitch, rhythm, beat times and more helping musicians visualize their music while also providing album art. We model our project avter the iTunes Visualizer but incorporating album art to the accompaning piece. Additionally we aim to provide sentiment analysis that analyzes the mood of the music.\nStatus Completed March 2017 - December 2017\n","permalink":"https://jamesonthai.github.io/projects/creations/ava/","tags":["Java","Processing/P3.js","Javascript","Perlin Noise"],"title":"AVA - Music Visualizer"},{"categories":null,"contents":" Mobile game designed for children ages five to nine in an effort to teach youths about cultural literacy while being imformative but also fun. Leading a team of five, we were introduced to the agile methodology as we worked with our client. To develop this came we taught ourselves Lua and Corona SDK over the course of the semester. The game is live and on the itunes app store!\nStatus  Completed September 2016 - May 2017\n ","permalink":"https://jamesonthai.github.io/projects/creations/how-in-the-world/","tags":["JSON","Lua","Mobile Game"],"title":"How In The World"},{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\n Don’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution.    ","permalink":"https://jamesonthai.github.io/publications/alldaydevops/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Organically DevOps: Building Quality and Security into the Software Supply Chain at Liberty Mutual"},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;]  Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ...  Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ]  ","permalink":"https://jamesonthai.github.io/search/","tags":null,"title":"Search Results"}]