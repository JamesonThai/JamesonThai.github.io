[{"categories":null,"contents":" Riot Champion Trends and Item Recommender is a data science project where I analyze and visualize a user\u0026rsquo;s performance in League of Legends. I compare their playing history data against a list of professional or similar ranking player\u0026rsquo;s game history data using R.\nTo obtain the list of professional players game data, I built a Python web crawler using the requests library and RIOT API to scrape their game data, storing them into JSON files. With these JSON files, I then conduct data analysis using R as I had no prior experience using the language.\nGoals Primary\nCompile list of professional players from Season 9 of League of Legends Acquire Data from RIOT Servers Build Pipeline for automated collection Conduct data analysis and visualize results \u0026ndash; In Progress Determine if secondary objectives are viable  Secondary\nDetermine if gold income and damage traded between players that leads to wins Compare user\u0026rsquo;s performance to professional players in general Compare user\u0026rsquo;s performance to their champion\u0026rsquo;s matchup and role  Note: There\u0026rsquo;s a lot of websites that already do this, however I want to get down on the specific timing on when they should get certain items and how much gold they should have at specific times.\nGithub https://github.com/JamesonThai/RiotGamesDataExtractionProject\n Its constantly being updated and is currently listed as a private repository and the API_KEY is unique per user account. Due to this, I removed some key files that contain my API_Key within it, ff you want to see the rest of the code feel free to send me an email or through a git request.  Status December 2018 - August 2019 (Paused)\n","permalink":"https://jamesonthai.github.io/projects/creations/riot-games-data-analysis/","tags":["Kaggle","Python Web Crawler","Requests","Riot API","Data Mining","Data Visualization","Recommendation System","Python","R","Tidyverse","JSON"],"title":"Riot Champion Trend and Item Recommender"},{"categories":null,"contents":"  Develop web application to enable users to analyze different quality metrics of software systems as it evolves over time. Visualize and construct a Tensorflow.js predictive model for predicting when, how, and to what extent developers influence software quality attributes. Introduce new features in frontend to visualize data as well as conduct real-time machine learning techniques on presented data.  Research Paper Links  Towards Better Understanding of Software Maintainability Evolution Towards Better Understanding of Software Quality Evolution through Commit-Impact Analysis A scalable and efficient approach for compiling and analyzing commit history  ","permalink":"https://jamesonthai.github.io/publications/usc/","tags":["Cloud","Python","Tensorflow.js","Java","Bash","Vagrant","PostgreSQL","NodeJS","Docker","scikit-learn"],"title":"Developer"},{"categories":null,"contents":" Based off the classic game Bomberman, my team of 8 people tackle how agents acomplish tasks with infinitely meaningful variations through competitive multi-agent learning. Our team was split betwen two teams; Pytorch and TensorForce, with the goal of seeing if different frameworks lead to different results but trying the same algorithms being PPO and A2C.\nWe leverage pre-existing architecture and code from Pommerman Competition as cited below.\n Pommerman Competition\nForked from Git\n Goals Primary Learn OpenAI Gym, Pommerman File, Suggested Algorithms Set up GCP or cloud training Build/Train PPO/A2C Agent Integrate Pytorch with Tensorboard  Secondary Publish Medium Article  In Progress HyperParameter Tune Define Evaluation Metrics for Visualization  Algorithms  Proximal Policy Optimization (PPO) Advantage Actor Critic (A2C)   Why PPO AND A2C?\n They\u0026rsquo;re up-to-date algorithms that help agents improve as they are trained. They\u0026rsquo;re the same with some differences being that PPO is a better version of A2C.\nPPO: Changes will not be as drastic as rewards that are capped at a threshold.\nTraining  Done on cloud server, currently on Google Cloud Platform (GCP) K80 GPU.\n In modifying the reward states, we researched papers extensively in seeing what was proposed and how it could help our model. Training with A2C is a lot quicker than PPO but not as consistent/stable.\nNote: Unfortuantely we could not use Google Collab which is a free to use service since it does not support Conda 2.7+ with Python 3+ as required to run the GYM environment.\n Technical Terms GYM - Environment to run game simulation, enables us to tweak speed of game and playing Playground - Provided Pommerman project that allows us to build and train agents Reward - What is used to tell the agent their action was good or bad ranging from -1.0 to 1.0  Status In-Progress August 2018 - Present\n","permalink":"https://jamesonthai.github.io/projects/contributions/pommerman/","tags":["Python","Pytorch","Tensorflow","Tensorboard","TensorForce","GCP","Multi-Agent Learning","PPO","A2C","Policy Optimization","Machine Learning","AI","GYM","Numpy","Conda","OpenCV"],"title":"Pommerman"},{"categories":null,"contents":" I led two fellow students to develop a Python recomendation system for suggesting ratings for a user\u0026rsquo;s review through collabortive filters and machine learning algorithms achieving our highest accuracy of 89%.\nGoals Acquire Amazon Dataset Exploratory analysis of dataset Use ML Algorithms to predict review ratings Build Jupyter notebook to predict ratings Visualize preprocessed information and compiled Bag Of Words Present findings to general and informed audience  Algorithms  KNN Naive Bayes Ordered Logistic Regression Linear SVM Doc2Vec Decision Trees  Dataset We filtered the initial dataset of over 12 million reviews (12 GB) into five separate data frames corresponding to their star ratings using Pandas. I then processed the data frames through feature selection and transformation, storing them as csv\u0026rsquo;s files.\nNote: The main reason we used such a small dataset was because we did not have enough computing power. Just running Naive Bayes alone took around a 4 days of non-stop running on the local machine.\nStatus Completed April 2018 - December 2018\n Although listed as completed, this is a project I want to revisit when I have more time.\n ","permalink":"https://jamesonthai.github.io/projects/creations/amazon-review/","tags":["Jupyter","Conda","Python","Sentiment Analysis","NLP","Naive Bayes","Doc2Vec","Bag Of Words","Logistic Regression","Linear SVM","Pandas","Random Forrests","Amazon Dataset - Data Analysis","Scikit-learn","Recommendation System","JSON"],"title":"Amazon Reviews - Sentiment Analysis"},{"categories":null,"contents":"Working with another student, TravelGo is an Android Application I contributed that aimed to function as a communication guide for traveling users. With a simple design, it includes examples in a variety of categories to help users learn on the go.\n","permalink":"https://jamesonthai.github.io/projects/contributions/travelgo/","tags":["Mobile","Translator","Java","Android"],"title":"TravelGo - Learn New Phrases"},{"categories":null,"contents":" I led a team of three to build an Automated Visualzing Application, AVA, for helping musicians visualize their music by analyzing musical notes and tones. AVA is based on machine learning model using Hidden Markov Chains (HNMs) and a Neural Netowrk created by Pybrain. She can detect pitch, rhythm, beat times and more helping musicians visualize their music while also providing album art. We model our project after the iTunes Visualizer but also incorporate an album art to the accompaning piece. Additionally we aim to provide sentiment analysis that analyzes the mood of the music.\nStatus Completed March 2017 - December 2017\n","permalink":"https://jamesonthai.github.io/projects/creations/ava/","tags":["Java","Processing/P3.js","Javascript","Perlin Noise"],"title":"AVA - Music Visualizer"},{"categories":null,"contents":" Mobile game designed for children ages five to nine in an effort to teach youths about cultural literacy while being imformative but also fun. Leading a team of five, we were introduced to the agile methodology as we worked with our client. To develop this came we taught ourselves Lua and Corona SDK over the course of the semester. The game is live and on the itunes app store!\nStatus  Completed September 2016 - May 2017\n ","permalink":"https://jamesonthai.github.io/projects/creations/how-in-the-world/","tags":["JSON","Lua","Mobile Game"],"title":"How In The World"},{"categories":null,"contents":" Developed Python image identification pipeline and model for identifying DC Universe characters in a given DCU comic page. Built Xception Convolutional Neural Network in Keras framework while training model on AWS EC2 instance. Present project architecture and convolutional neural network model\u0026rsquo;s layer activation to WB executive, data intelligence team, and DCU stakeholders.  ","permalink":"https://jamesonthai.github.io/publications/wb/","tags":["CNN","Deep Reinforcement Learning","Data Science","Python","Keras","Tensorflow","scikit-learn","Confusion Matrix","AUC","Data Analysis","Pixel Activations","AWS"],"title":"Data Science Intern"},{"categories":null,"contents":"  Improved existing SQL queries and pHP sanitization protocols Overhauled preexisting ticketing system with Google Scripting Language Assisted consumers in strengthening the fine arts community by recommending similar performing arts shows evaluated from user data. Design, develop, and maintain College of Humanties and Art\u0026rsquo;s departmant and San Jose Hammer Theater Center\u0026rsquo;s websites.  Project Links Ticketing System\nHumanties and Arts Website\nHammer Theatre\n","permalink":"https://jamesonthai.github.io/publications/sjsu/","tags":["PHP","Javascript","Google Script Language","Data Analytics","Web Development","SQL","Docker"],"title":"Web Developer"},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;]  Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ...  Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ]  ","permalink":"https://jamesonthai.github.io/search/","tags":null,"title":"Search Results"}]